/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liquibaseproject.api;

import com.liquibaseproject.model.ApiResponseSchema;
import com.liquibaseproject.model.NewProduct;
import com.liquibaseproject.model.Products;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "products", description = "List of products")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products : Add a new product
     * Add a new product
     *
     * @param newProduct Create a new product (required)
     * @return Product has been successfully added (status code 200)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Add a new product",
        description = "Add a new product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product has been successfully added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Products.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Products.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<Products> addProduct(
        @Parameter(name = "NewProduct", description = "Create a new product", required = true) @Valid @RequestBody NewProduct newProduct
    ) {
        return getDelegate().addProduct(newProduct);
    }


    /**
     * DELETE /products/{id} : Deletes a product
     * delete a product
     *
     * @param id Product ID for the product that needs to be deleted (required)
     * @return Product found by ID (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Deletes a product",
        description = "delete a product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product found by ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<ApiResponseSchema> deleteProduct(
        @Parameter(name = "id", description = "Product ID for the product that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteProduct(id);
    }


    /**
     * GET /products/findAll : List all products
     *
     * @return Products have been successfully listed (status code 200)
     */
    @Operation(
        operationId = "findAllProducts",
        summary = "List all products",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products have been successfully listed", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Products.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Products.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/findAll",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<List<Products>> findAllProducts(
        
    ) {
        return getDelegate().findAllProducts();
    }


    /**
     * GET /products/findByName : Find products by product name
     * Multiple products can be provided with comma separated strings (case insensitive)
     *
     * @param names  (optional)
     * @return Products have been successfully found by product name (status code 200)
     */
    @Operation(
        operationId = "findProductsByName",
        summary = "Find products by product name",
        description = "Multiple products can be provided with comma separated strings (case insensitive)",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products have been successfully found by product name", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Products.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Products.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/findByName",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<List<Products>> findProductsByName(
        @Parameter(name = "names", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "names", required = false) String names
    ) {
        return getDelegate().findProductsByName(names);
    }


    /**
     * GET /products/{id} : Find product by ID
     * Returns a single product
     *
     * @param id Product ID to return (required)
     * @return Product found by ID (status code 200)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Find product by ID",
        description = "Returns a single product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product found by ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Products.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Products.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<Products> getProductById(
        @Parameter(name = "id", description = "Product ID to return", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getProductById(id);
    }


    /**
     * PUT /products : Update an existing product
     * Update an existing product by Id
     *
     * @param products Update an existing product (required)
     * @return Product has been successfully updated (status code 200)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update an existing product",
        description = "Update an existing product by Id",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product has been successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<ApiResponseSchema> updateProduct(
        @Parameter(name = "Products", description = "Update an existing product", required = true) @Valid @RequestBody Products products
    ) {
        return getDelegate().updateProduct(products);
    }


    /**
     * POST /products/{id} : Updates a product with form data
     * 
     *
     * @param id ID of product that needs to be updated (required)
     * @param name Name for the product that needs to be updated (optional)
     * @param description Description for the product that needs to be updated (optional)
     * @param price Price for the product that needs to be updated (optional)
     * @param quantity Quantity of the product that needs to be updated (optional)
     * @return Product found by ID (status code 200)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "updateProductWithForm",
        summary = "Updates a product with form data",
        description = "",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product found by ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            }),
            @ApiResponse(responseCode = "403", description = "Access forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponseSchema.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ApiResponseSchema.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products/{id}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<ApiResponseSchema> updateProductWithForm(
        @Parameter(name = "id", description = "ID of product that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "name", description = "Name for the product that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "description", description = "Description for the product that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "price", description = "Price for the product that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "price", required = false) Double price,
        @Parameter(name = "quantity", description = "Quantity of the product that needs to be updated", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quantity", required = false) Integer quantity
    ) {
        return getDelegate().updateProductWithForm(id, name, description, price, quantity);
    }

}
